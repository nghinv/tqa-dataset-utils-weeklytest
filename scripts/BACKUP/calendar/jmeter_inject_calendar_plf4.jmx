<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="tqa-583" enabled="true">
      <stringProp name="TestPlan.comments">Recorded from PLF 3.5.3</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Server" elementType="Argument">
            <stringProp name="Argument.name">Server</stringProp>
            <stringProp name="Argument.value">${__P(expHost,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Port" elementType="Argument">
            <stringProp name="Argument.name">Port</stringProp>
            <stringProp name="Argument.value">${__P(expPort,8080)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPrefix" elementType="Argument">
            <stringProp name="Argument.name">UserPrefix</stringProp>
            <stringProp name="Argument.value">${__P(expUserPrefix,a)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserIdMin" elementType="Argument">
            <stringProp name="Argument.name">UserIdMin</stringProp>
            <stringProp name="Argument.value">${__P(expUserIdMin,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserIdMax" elementType="Argument">
            <stringProp name="Argument.name">UserIdMax</stringProp>
            <stringProp name="Argument.value">${__P(expUserIdMax,14)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberOfEvent" elementType="Argument">
            <stringProp name="Argument.name">NumberOfEvent</stringProp>
            <stringProp name="Argument.value">${__P(expNumberOfEvent,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EventPrefix" elementType="Argument">
            <stringProp name="Argument.name">EventPrefix</stringProp>
            <stringProp name="Argument.value">${__P(expEventPrefix,A)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="from" elementType="Argument">
            <stringProp name="Argument.name">from</stringProp>
            <stringProp name="Argument.value">${__P(expDate,10/17/2012)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endRepeatType" elementType="Argument">
            <stringProp name="Argument.name">endRepeatType</stringProp>
            <stringProp name="Argument.value">${__P(expEndRepeatType,endAfter)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endAfterNumber" elementType="Argument">
            <stringProp name="Argument.name">endAfterNumber</stringProp>
            <stringProp name="Argument.value">${__P(expEndAfterNumber,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="endDate" elementType="Argument">
            <stringProp name="Argument.name">endDate</stringProp>
            <stringProp name="Argument.value">${__P(expEndDate,12/31/2013)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberOfDailyEvent" elementType="Argument">
            <stringProp name="Argument.name">NumberOfDailyEvent</stringProp>
            <stringProp name="Argument.value">${__P(expNumberOfDailyEvent,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberOfTask" elementType="Argument">
            <stringProp name="Argument.name">NumberOfTask</stringProp>
            <stringProp name="Argument.value">${__P(expNumberOfTask,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberOfWeeklyEvent" elementType="Argument">
            <stringProp name="Argument.name">NumberOfWeeklyEvent</stringProp>
            <stringProp name="Argument.value">${__P(expNumberOfWeeklyEvent,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberOfMonthlyEvent" elementType="Argument">
            <stringProp name="Argument.name">NumberOfMonthlyEvent</stringProp>
            <stringProp name="Argument.value">${__P(expNumberOfMonthlyEvent,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberOfYearlyEvent" elementType="Argument">
            <stringProp name="Argument.name">NumberOfYearlyEvent</stringProp>
            <stringProp name="Argument.value">${__P(expNumberOfYearlyEvent,0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ImportanceAssertionHighlightString" elementType="Argument">
            <stringProp name="Argument.name">ImportanceAssertionHighlightString</stringProp>
            <stringProp name="Argument.value">STOP-TEST-IF-FAIL</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UseDemoAccount" elementType="Argument">
            <stringProp name="Argument.name">UseDemoAccount</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserPassword" elementType="Argument">
            <stringProp name="Argument.name">UserPassword</stringProp>
            <stringProp name="Argument.value">exo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="continue" elementType="Argument">
            <stringProp name="Argument.name">continue</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DateCSV" elementType="Argument">
            <stringProp name="Argument.name">DateCSV</stringProp>
            <stringProp name="Argument.value">${__P(expDateCSV,/media/data/tqa/tqa-884/jmeter/csv/May_2_weeks.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="inject Event and Task" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__jexl(${UserIdMax}-${UserIdMin}+1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1337076445000</longProp>
        <longProp name="ThreadGroup.end_time">1337076445000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">rfc2109</stringProp>
        </CookieManager>
        <hashTree/>
        <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="jp@gc - Variables From CSV File" enabled="true">
          <collectionProp name="Arguments.arguments"/>
          <stringProp name="filename">${DateCSV}</stringProp>
          <stringProp name="variablesPrefix">EXPECTDATE_</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="storeSysProp">false</boolProp>
        </kg.apc.jmeter.config.VariablesFromCSV>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Startup Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">long epoch =  System.currentTimeMillis()/1000;
vars.put(&quot;continue&quot;,&quot;true&quot;);
vars.put(&quot;loggedin&quot;,&quot;true&quot;);
vars.put(&quot;epoch&quot;,epoch.toString());

/*
if ( (vars.get(&quot;UseDemoAccount&quot;).toString().equals(&quot;true&quot;)))
{
	vars.put(&quot;UserName&quot;,&quot;james&quot;);
	vars.put(&quot;UserPassword&quot;,&quot;gtn&quot;);
}
else
{
	vars.put(&quot;UserName&quot;,vars.get(&quot;UserIdPrefix&quot;)+vars.get(&quot;UserId&quot;));
}
*/

//log.info(&quot;Thread [&quot; +ctx.getThread().getThreadName() + &quot;] start iteration number: &quot; + vars.get(&quot;IterationCounter&quot;)+ &quot;, account: [&quot; + vars.get(&quot;UserName&quot;) +&quot;,&quot; + 
/*
vars.get(&quot;UserPassword&quot;) +&quot;]&quot;) ;
vars.put(&quot;ThreadName&quot;,ctx.getThread().getThreadName().replace(&quot; &quot;,&quot;_&quot;));
vars.put(&quot;PRE&quot;,&quot;QUERY&quot;);
*/
ResponseCode=2*100;
ResponseMessage=&quot;initialize continue variable&quot;;
return &quot;continue variable=true&quot;;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="${PRE} Constant Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">300</stringProp>
          </ConstantTimer>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${PRE} 1000.  ++Login" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${PRE} 1100.Goto /portal/default/" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/portal/default/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-gb,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Keep-Alive" elementType="Header">
                  <stringProp name="Header.name">Keep-Alive</stringProp>
                  <stringProp name="Header.value">115</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-GB; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Accept-Charset" elementType="Header">
                  <stringProp name="Header.name">Accept-Charset</stringProp>
                  <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${PRE} 1100.Goto /portal/intranet/" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/portal/intranet/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-gb,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Keep-Alive" elementType="Header">
                  <stringProp name="Header.name">Keep-Alive</stringProp>
                  <stringProp name="Header.value">115</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-GB; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${Server}:${Port}/portal/default/</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Accept-Charset" elementType="Header">
                  <stringProp name="Header.name">Accept-Charset</stringProp>
                  <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="71152865">Welcome to ACME</stringProp>
                <stringProp name="695498619">The Acme Social Intranet</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${PRE} 1200.Show login form" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="portal:componentId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">portal:componentId</stringProp>
                  <stringProp name="Argument.value">UIPortal</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="amp;portal:action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">amp;portal:action</stringProp>
                  <stringProp name="Argument.value">ShowLoginForm</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="ajaxRequest" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ajaxRequest</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/portal/intranet/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-gb,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Keep-Alive" elementType="Header">
                  <stringProp name="Header.name">Keep-Alive</stringProp>
                  <stringProp name="Header.value">115</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (X11; U; Linux i686 (x86_64); en-GB; rv:1.9.2.28) Gecko/20120306 Firefox/3.6.28</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Accept-Charset" elementType="Header">
                  <stringProp name="Header.name">Accept-Charset</stringProp>
                  <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${PRE} 1200.Type Account And Login (/portal/login) " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="initialURI" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">initialURI</stringProp>
                  <stringProp name="Argument.value">%2Fportal%2Fintranet%2F</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${UserPrefix}${UserId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${UserPassword}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/portal/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Ubuntu; X11; Linux x86_64; rv:8.0) Gecko/20100101 Firefox/8.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept-Charset" elementType="Header">
                  <stringProp name="Header.name">Accept-Charset</stringProp>
                  <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.7</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ${ImportanceAssertionHighlightString}" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-737592314">MY SPACES|My Spaces</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract BookmarkSecureToken" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">BookmarkSecureToken</stringProp>
              <stringProp name="RegexExtractor.regex">(eXo\.gadget\.UIGadget\.createGadget).*(Bookmark\.xml).*(&quot;secureToken&quot;:&quot;)([^&quot;]+)(&quot;,&quot;)</stringProp>
              <stringProp name="RegexExtractor.template">$4$</stringProp>
              <stringProp name="RegexExtractor.default">xxxBookmarkSecureTokenxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract AgendaSecureToken" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AgendaSecureToken</stringProp>
              <stringProp name="RegexExtractor.regex">(eXo\.gadget\.UIGadget\.createGadget).*(Agenda\.xml).*(&quot;secureToken&quot;:&quot;)([^&quot;]+)(&quot;,&quot;)</stringProp>
              <stringProp name="RegexExtractor.template">$4$</stringProp>
              <stringProp name="RegexExtractor.default">xxxAgendaSecureTokenxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract InvitationsSecureToken" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">InvitationsSecureToken</stringProp>
              <stringProp name="RegexExtractor.regex">(eXo\.gadget\.UIGadget\.createGadget).*(Invitations\.xml).*(&quot;secureToken&quot;:&quot;)([^&quot;]+)(&quot;,&quot;)</stringProp>
              <stringProp name="RegexExtractor.template">$4$</stringProp>
              <stringProp name="RegexExtractor.default">xxxInvitationsSecureTokenxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract PollSecureToken" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PollSecureToken</stringProp>
              <stringProp name="RegexExtractor.regex">(eXo\.gadget\.UIGadget\.createGadget).*(Poll\.xml).*(&quot;secureToken&quot;:&quot;)([^&quot;]+)(&quot;,&quot;)</stringProp>
              <stringProp name="RegexExtractor.template">$4$</stringProp>
              <stringProp name="RegexExtractor.default">xxxPollSecureTokenxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract FavoriteDocumentSecureToken" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">FavoriteDocumentSecureToken</stringProp>
              <stringProp name="RegexExtractor.regex">(eXo\.gadget\.UIGadget\.createGadget).*(FavoriteDocument\.xml).*(&quot;secureToken&quot;:&quot;)([^&quot;]+)(&quot;,&quot;)</stringProp>
              <stringProp name="RegexExtractor.template">$4$</stringProp>
              <stringProp name="RegexExtractor.default">xxxFavoriteDocumentSecureTokenxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract WhoIsOnlineSecureToken " enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WhoIsOnlineSecureToken</stringProp>
              <stringProp name="RegexExtractor.regex">(eXo\.gadget\.UIGadget\.createGadget).*(WhoIsOnline\.xml).*(&quot;secureToken&quot;:&quot;)([^&quot;]+)(&quot;,&quot;)</stringProp>
              <stringProp name="RegexExtractor.template">$4$</stringProp>
              <stringProp name="RegexExtractor.default">xxxWhoIsOnlineSecureTokenxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract ProfileSecureToken" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ProfileSecureToken</stringProp>
              <stringProp name="RegexExtractor.regex">(eXo\.gadget\.UIGadget\.createGadget).*(Profile\.xml).*(&quot;secureToken&quot;:&quot;)([^&quot;]+)(&quot;,&quot;)</stringProp>
              <stringProp name="RegexExtractor.template">$4$</stringProp>
              <stringProp name="RegexExtractor.default">xxxProfileSecureTokenxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extractor activitiesPortalComponentId" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">activitiesPortalComponentId</stringProp>
              <stringProp name="RegexExtractor.regex">/portal/intranet/\?portal:componentId=([a-zA-Z0-9\-\_]+)&amp;[amp;]*interactionstate=([a-zA-Z0-9_\*]+)&amp;[amp;]*portal:type=action.*(Space Updates|My Space)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">xxxactivitiesPortalComponentIdxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extractor interactionstateSpaceActivity" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">interactionstateSpaceActivity</stringProp>
              <stringProp name="RegexExtractor.regex">/portal/intranet/\?portal:componentId=([a-zA-Z0-9\-\_]+)&amp;[amp;]*interactionstate=([a-zA-Z0-9_\*]+)&amp;[amp;]*portal:type=action.*(Space Updates|My Space)</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">xxxinteractionstateSpaceActivityxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extractor interactionstateMyStatus" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">interactionstateMyActivity</stringProp>
              <stringProp name="RegexExtractor.regex">/portal/intranet/\?portal:componentId=([a-zA-Z0-9\_\-]+)&amp;[amp;]*interactionstate=([a-zA-Z0-9_\*]+)&amp;[amp;]*portal:type=action.*My Status</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">xxxinteractionstateMyActivityxxx</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract AllImportanceValue" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">AllImportanceValue</stringProp>
              <stringProp name="RegexExtractor.regex">xxxAllImportanceValuexxx</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">${ProfileSecureToken}-${InvitationsSecureToken}-${BookmarkSecureToken}-${activitiesPortalComponentId}-${interactionstateSpaceActivity}${interactionstateMyActivity}</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - ${ImportanceAssertionHighlightString}" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-25006536">(ProfileSecureToken)|(InvitationsSecureToken)|(BookmarkSecureToken)|(activitiesPortalComponentId)|(interactionstateSpaceActivity)|(interactionstateMyActivity)</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">AllImportanceValue</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">org.apache.jmeter.assertions.AssertionResult[] assertionResults = SampleResult.getAssertionResults();
     if ((assertionResults != null) &amp;&amp; (assertionResults.length &gt; 0)) 
     {
		for (int i = 0; i &lt; assertionResults.length; i++) 
		{
			if ((assertionResults[i].isFailure() || assertionResults[i].isError())
			&amp;&amp; assertionResults[i].getName().indexOf(vars.get(&quot;ImportanceAssertionHighlightString&quot;)) &gt; -1)
			{
				Failure =true ;
				FailureMessage=assertionResults[i].getFailureMessage();
				vars.put(&quot;continue&quot;,&quot;false&quot;);
				vars.put(&quot;loggedin&quot;,&quot;false&quot;);
				break;
			}
		}
		break;
     }
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="false">
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="RESPONSE_DATA">${AllImportanceValue}</stringProp>
            <stringProp name="RESPONSE_TIME">${__Random(1,1000)}</stringProp>
            <boolProp name="WAITING">false</boolProp>
            <stringProp name="REQUEST_DATA"></stringProp>
            <stringProp name="LATENCY"></stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">${UserIdMin}</stringProp>
            <stringProp name="CounterConfig.end">${UserIdMax}</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">UserId</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="${PRE} 3100.  ++Goto calendar home (/portal/intranet/calendar) ${AllImportanceValue}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-us,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/12.0</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - EventId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">EventId</stringProp>
            <stringProp name="RegexExtractor.regex">caltype=&quot;2&quot;.* eventid=&quot;(Event[^&quot;]+)&quot;.*calid=&quot;([^&quot;]+)&quot; startTime=&quot;([^&quot;]+)&quot;  endTime=&quot;([^&quot;]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">!!!EventId!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - EventCalendarId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">EventCalendarId</stringProp>
            <stringProp name="RegexExtractor.regex">caltype=&quot;2&quot;.* eventid=&quot;(Event[^&quot;]+)&quot;.*calid=&quot;([^&quot;]+)&quot; startTime=&quot;([^&quot;]+)&quot;  endTime=&quot;([^&quot;]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">!!!EventCalendarId!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - TaskId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">TaskId</stringProp>
            <stringProp name="RegexExtractor.regex">caltype=&quot;0&quot;.* eventid=&quot;(Event[^&quot;]+)&quot;.*calid=&quot;([^&quot;]+)&quot; startTime=&quot;([^&quot;]+)&quot;  endTime=&quot;([^&quot;]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">!!!TaskId!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - TaskCalendarId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">TaskCalendarId</stringProp>
            <stringProp name="RegexExtractor.regex">caltype=&quot;0&quot;.* eventid=&quot;(Event[^&quot;]+)&quot;.*calid=&quot;([^&quot;]+)&quot; startTime=&quot;([^&quot;]+)&quot;  endTime=&quot;([^&quot;]+)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$2$</stringProp>
            <stringProp name="RegexExtractor.default">!!!TaskCalendarId!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Main calendar assertion - ${ImportanceAssertionHighlightString}" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1955209263">GotoDate</stringProp>
              <stringProp name="-1335865848">MovePrevious</stringProp>
              <stringProp name="-39956860">MoveNext</stringProp>
              <stringProp name="515264223">AddCalendar</stringProp>
              <stringProp name="1913224644">RemoteCalendar</stringProp>
              <stringProp name="-740677085">ImportCalendar</stringProp>
              <stringProp name="-1945875662">ExportCalendar</stringProp>
              <stringProp name="540774429">ShareCalendar</stringProp>
              <stringProp name="23708991">RefreshRemoteCalendar</stringProp>
              <stringProp name="2599333">Task</stringProp>
              <stringProp name="67338874">Event</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - EventId" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1635461779">!!!EventId!!!</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">EventId</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - TaskId" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="768946048">!!!TaskId!!!</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">TaskId</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - Event_interactionstate" enabled="true">
            <stringProp name="TestPlan.comments">&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Event_interactionstate</stringProp>
            <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIWeekView&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
            <stringProp name="RegexExtractor.template">$3$</stringProp>
            <stringProp name="RegexExtractor.default">!!!Event_interactionstate!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - Event_componentId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Event_componentId</stringProp>
            <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIWeekView&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">!!!${Event_componentId}!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <stringProp name="TestPlan.comments">${Event_componentId}</stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Main calendar assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-483875908">!!!Event_interactionstate!!!</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">Event_interactionstate</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - Calendar_View_Today_interactionstate" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Calendar_View_Today_interactionstate</stringProp>
            <stringProp name="RegexExtractor.regex">calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;).*(\n[ \t]*)*.*TodayIcon</stringProp>
            <stringProp name="RegexExtractor.template">$3$</stringProp>
            <stringProp name="RegexExtractor.default">!!!Calendar_View_Today_interactionstate!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - Calendar_View_WeekView_interactionstate" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Calendar_View_WeekView_interactionstate</stringProp>
            <stringProp name="RegexExtractor.regex">calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;).*(\n[ \t]*)*.*WeekView</stringProp>
            <stringProp name="RegexExtractor.template">$3$</stringProp>
            <stringProp name="RegexExtractor.default">!!!Calendar_View_WeekView_interactionstate!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - Calendar_View_MonthView_interactionstate" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Calendar_View_MonthView_interactionstate</stringProp>
            <stringProp name="RegexExtractor.regex">calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;).*(\n[ \t]*)*.*MonthView</stringProp>
            <stringProp name="RegexExtractor.template">$3$</stringProp>
            <stringProp name="RegexExtractor.default">!!!Calendar_View_MonthView_interactionstate!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - Calendar_View_ListContainer_interactionstate" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">Calendar_View_ListContainer_interactionstate</stringProp>
            <stringProp name="RegexExtractor.regex">calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;).*(\n[ \t]*)*.*ListContainerIcon</stringProp>
            <stringProp name="RegexExtractor.template">$3$</stringProp>
            <stringProp name="RegexExtractor.default">!!!Calendar_View_ListContainer_interactionstate!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIQuickAddEvent_interactionstate" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">UIQuickAddEvent_interactionstate</stringProp>
            <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIQuickAddEvent&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
            <stringProp name="RegexExtractor.template">$3$</stringProp>
            <stringProp name="RegexExtractor.default">!!!UIQuickAddEvent_interactionstate!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIQuickAddTask_interactionstate" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">UIQuickAddTask_interactionstate</stringProp>
            <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIQuickAddTask&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
            <stringProp name="RegexExtractor.template">$3$</stringProp>
            <stringProp name="RegexExtractor.default">!!!UIQuickAddTask_interactionstate!!!</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">org.apache.jmeter.assertions.AssertionResult[] assertionResults = SampleResult.getAssertionResults();
     if ((assertionResults != null) &amp;&amp; (assertionResults.length &gt; 0)) 
     {
		for (int i = 0; i &lt; assertionResults.length; i++) 
		{
			if ((assertionResults[i].isFailure() || assertionResults[i].isError())
			&amp;&amp; assertionResults[i].getName().indexOf(vars.get(&quot;ImportanceAssertionHighlightString&quot;)) &gt; -1)
			{
				Failure =true ;
				FailureMessage=assertionResults[i].getFailureMessage();
				vars.put(&quot;continue&quot;,&quot;false&quot;);
				vars.put(&quot;loggedin&quot;,&quot;false&quot;);
				break;
			}
		}
		break;
     }
// vars.put(&quot;continue&quot;,&quot;true&quot;);
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ++Login successfully then execute main scenario" enabled="true">
          <stringProp name="IfController.condition">${__javaScript(&quot;${continue}&quot;==&quot;true&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create data" enabled="true"/>
          <hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
              <stringProp name="ForeachController.inputVal">EXPECTDATE_</stringProp>
              <stringProp name="ForeachController.returnVal">from</stringProp>
              <boolProp name="ForeachController.useSeparator">false</boolProp>
            </ForeachController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Daily Event" enabled="false">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${NumberOfDailyEvent}</stringProp>
              </LoopController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                  <stringProp name="maximumValue">17</stringProp>
                  <stringProp name="minimumValue">9</stringProp>
                  <stringProp name="outputFormat">00</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">startHour</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${NumberOfDailyEvent}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">EventId</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="more detail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">MoreDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIQuickAddEvent_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIEventForm_interactionstate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UIEventForm_interactionstate</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIEventForm&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">!!!UIEventForm!!!</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="edit repeat" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">EditRepeat</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${UserPrefix}${UserId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">${UserPrefix}${UserId}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIRepeatEventForm_interactionstate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UIRepeatEventForm_interactionstate</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIRepeatEventForm&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">!!!UIRepeatEventForm_interactionstate!!!</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save (repeat)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="repeatType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">repeatType</stringProp>
                        <stringProp name="Argument.value">daily</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="interval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">interval</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MO" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MO</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TU" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TU</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WE" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WE</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TH" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TH</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FR" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FR</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="SA" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">SA</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="SU" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">SU</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="monthlyType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">monthlyType</stringProp>
                        <stringProp name="Argument.value">monthlyByMonthDay</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endRepeat</stringProp>
                        <stringProp name="Argument.value">${endRepeatType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endRepeat</stringProp>
                        <stringProp name="Argument.value">${endRepeatType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endAfterNumber" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endAfterNumber</stringProp>
                        <stringProp name="Argument.value">${endAfterNumber}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endDate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">endDate</stringProp>
                        <stringProp name="Argument.value">${endDate}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIRepeatEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save (detail)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">${EventPrefix}_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${UserPrefix}${UserId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">${UserPrefix}${UserId}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cancel (sending invitation)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">ConfirmCancel</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">${EventPrefix}_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="abc.user0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">abc.user0</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Normal Event" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${NumberOfEvent}</stringProp>
              </LoopController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                  <stringProp name="maximumValue">17</stringProp>
                  <stringProp name="minimumValue">9</stringProp>
                  <stringProp name="outputFormat">00</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">startHour</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${NumberOfEvent}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">EventId</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="normal event ${from}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">Event_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIQuickAddEvent_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Task" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${NumberOfTask}</stringProp>
              </LoopController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                  <stringProp name="maximumValue">17</stringProp>
                  <stringProp name="minimumValue">9</stringProp>
                  <stringProp name="outputFormat">00</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">startHour</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="false">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${NumberOfTask}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">EventId</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="task ${from}" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">Task_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:45</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIQuickAddTask_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Weekly Event" enabled="false">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${NumberOfWeeklyEvent}</stringProp>
              </LoopController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                  <stringProp name="maximumValue">17</stringProp>
                  <stringProp name="minimumValue">9</stringProp>
                  <stringProp name="outputFormat">00</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">startHour</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${NumberOfWeeklyEvent}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">EventId</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="more detail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">MoreDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIQuickAddEvent_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIEventForm_interactionstate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UIEventForm_interactionstate</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIEventForm&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">!!!UIEventForm!!!</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="edit repeat" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">EditRepeat</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${UserPrefix}${UserId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">${UserPrefix}${UserId}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIRepeatEventForm_interactionstate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UIRepeatEventForm_interactionstate</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIRepeatEventForm&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">!!!UIRepeatEventForm_interactionstate!!!</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save (repeat)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="repeatType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">repeatType</stringProp>
                        <stringProp name="Argument.value">weekly</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="interval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">interval</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MO" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MO</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TU" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TU</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WE" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WE</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TH" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TH</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FR" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FR</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="SA" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">SA</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="SU" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">SU</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="monthlyType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">monthlyType</stringProp>
                        <stringProp name="Argument.value">monthlyByMonthDay</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endRepeat</stringProp>
                        <stringProp name="Argument.value">${endRepeatType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endAfterNumber" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endAfterNumber</stringProp>
                        <stringProp name="Argument.value">${endAfterNumber}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endRepeat</stringProp>
                        <stringProp name="Argument.value">${endRepeatType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endDate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">endDate</stringProp>
                        <stringProp name="Argument.value">${endDate}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIRepeatEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save (detail)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">${EventPrefix}_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${UserPrefix}${UserId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">${UserPrefix}${UserId}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cancel (sending invitation)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">ConfirmCancel</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">${EventPrefix}_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="abc.user0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">abc.user0</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Monthly Event" enabled="false">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${NumberOfMonthlyEvent}</stringProp>
              </LoopController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                  <stringProp name="maximumValue">17</stringProp>
                  <stringProp name="minimumValue">9</stringProp>
                  <stringProp name="outputFormat">00</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">startHour</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${NumberOfMonthlyEvent}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">EventId</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="more detail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">MoreDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIQuickAddEvent_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIEventForm_interactionstate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UIEventForm_interactionstate</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIEventForm&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">!!!UIEventForm!!!</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="edit repeat" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">EditRepeat</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${UserPrefix}${UserId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">${UserPrefix}${UserId}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIRepeatEventForm_interactionstate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UIRepeatEventForm_interactionstate</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIRepeatEventForm&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">!!!UIRepeatEventForm_interactionstate!!!</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save (repeat)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="repeatType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">repeatType</stringProp>
                        <stringProp name="Argument.value">monthly</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="interval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">interval</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MO" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MO</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TU" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TU</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WE" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WE</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TH" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TH</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FR" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FR</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="SA" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">SA</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="SU" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">SU</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="monthlyType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">monthlyType</stringProp>
                        <stringProp name="Argument.value">monthlyByMonthDay</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endRepeat</stringProp>
                        <stringProp name="Argument.value">${endRepeatType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endRepeat</stringProp>
                        <stringProp name="Argument.value">${endRepeatType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endAfterNumber" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endAfterNumber</stringProp>
                        <stringProp name="Argument.value">${endAfterNumber}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endDate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">endDate</stringProp>
                        <stringProp name="Argument.value">${endDate}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIRepeatEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save (detail)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">${EventPrefix}_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${UserPrefix}${UserId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">${UserPrefix}${UserId}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cancel (sending invitation)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">ConfirmCancel</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">${EventPrefix}_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="abc.user0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">abc.user0</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Yearly Event" enabled="false">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${NumberOfYearlyEvent}</stringProp>
              </LoopController>
              <hashTree>
                <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                  <stringProp name="maximumValue">17</stringProp>
                  <stringProp name="minimumValue">9</stringProp>
                  <stringProp name="outputFormat">00</stringProp>
                  <boolProp name="perThread">false</boolProp>
                  <stringProp name="randomSeed"></stringProp>
                  <stringProp name="variableName">startHour</stringProp>
                </RandomVariableConfig>
                <hashTree/>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${NumberOfYearlyEvent}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">EventId</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">false</boolProp>
                </CounterConfig>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="more detail" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">MoreDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIQuickAddEvent_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIEventForm_interactionstate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UIEventForm_interactionstate</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIEventForm&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">!!!UIEventForm!!!</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="edit repeat" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">EditRepeat</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${UserPrefix}${UserId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">${UserPrefix}${UserId}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract - UIRepeatEventForm_interactionstate" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UIRepeatEventForm_interactionstate</stringProp>
                    <stringProp name="RegexExtractor.regex">\&lt;form.*id=&quot;UIRepeatEventForm&quot; .*calendar\?portal:componentId=([^&amp;]*)(&amp;amp;|&amp;)interactionstate=([^&amp;]+)(&amp;amp;|&amp;)</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">!!!UIRepeatEventForm_interactionstate!!!</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save (repeat)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="repeatType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">repeatType</stringProp>
                        <stringProp name="Argument.value">yearly</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="interval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">interval</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MO" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MO</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TU" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TU</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WE" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WE</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="TH" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">TH</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="FR" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">FR</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="SA" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">SA</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="SU" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">SU</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="monthlyType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">monthlyType</stringProp>
                        <stringProp name="Argument.value">monthlyByMonthDay</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endRepeat</stringProp>
                        <stringProp name="Argument.value">${endRepeatType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endRepeat</stringProp>
                        <stringProp name="Argument.value">${endRepeatType}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endAfterNumber" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">endAfterNumber</stringProp>
                        <stringProp name="Argument.value">${endAfterNumber}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="endDate" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">endDate</stringProp>
                        <stringProp name="Argument.value">${endDate}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIRepeatEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="save (detail)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">Save</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">${EventPrefix}_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="${UserPrefix}${UserId}" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">${UserPrefix}${UserId}</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="cancel (sending invitation)" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="formOp" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">formOp</stringProp>
                        <stringProp name="Argument.value">ConfirmCancel</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">currentSelectedTab</stringProp>
                        <stringProp name="Argument.value">eventDetail</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="eventName" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">eventName</stringProp>
                        <stringProp name="Argument.value">${EventPrefix}_${EventId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="description" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">description</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="place" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">place</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="from" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">from</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="fromTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">fromTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="to" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">to</stringProp>
                        <stringProp name="Argument.value">${from}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="toTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">toTime</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="allDay" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">allDay</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="priority" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">priority</stringProp>
                        <stringProp name="Argument.value">none</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="isRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">isRepeat</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="calendar" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">calendar</stringProp>
                        <stringProp name="Argument.value">0:${UserPrefix}${UserId}-defaultCalendarId</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="category" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">category</stringProp>
                        <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminder</stringProp>
                        <stringProp name="Argument.value">true</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">mailReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">mailReminderAddress</stringProp>
                        <stringProp name="Argument.value">${UserPrefix}${UserId}@example.com</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminder" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminder</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupReminderTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupReminderTime</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupIsRepeat</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                        <stringProp name="Argument.value">5</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="status" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">status</stringProp>
                        <stringProp name="Argument.value">busy</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="send" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">send</stringProp>
                        <stringProp name="Argument.value">ask</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="checkTime" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">checkTime</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="dateAll" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">dateAll</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeTo" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeTo</stringProp>
                        <stringProp name="Argument.value">${startHour}:30</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="timeFrom" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">timeFrom</stringProp>
                        <stringProp name="Argument.value">${startHour}:00</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="abc.user0" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">abc.user0</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${Server}</stringProp>
                  <stringProp name="HTTPSampler.port">${Port}</stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=${Event_componentId}&amp;interactionstate=${UIEventForm_interactionstate}&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.implementation">Java</stringProp>
                  <boolProp name="HTTPSampler.monitor">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                      </elementProp>
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Charset" elementType="Header">
                        <stringProp name="Header.name">Accept-Charset</stringProp>
                        <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">EventId</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Logout" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="portal:componentId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">portal:componentId</stringProp>
                    <stringProp name="Argument.value">UIPortal</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="amp;portal:action" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">amp;portal:action</stringProp>
                    <stringProp name="Argument.value">Logout</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${Server}</stringProp>
              <stringProp name="HTTPSampler.port">${Port}</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/portal/intranet/calendar</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (X${UserIdMin}${UserIdMin}; Linux x86_64) AppleWebKit/5${UserIdMax}6.${UserIdMin}0 (KHTML, like Gecko) Chrome/${NumberOfEvent}0.0.${UserIdMin}${UserIdMin}${NumberOfEvent}${UserIdMax}.4 Safari/5${UserIdMax}6.${UserIdMin}0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar?initialURI=/portal/intranet/calendar</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Charset" elementType="Header">
                    <stringProp name="Header.name">Accept-Charset</stringProp>
                    <stringProp name="Header.value">ISO-8859-${UserIdMin},utf-8;q=0.7,*;q=0.${UserIdMax}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="event" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1337153771000</longProp>
        <longProp name="ThreadGroup.end_time">1337153771000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcrAAt1aWNvbXBvbmVudAAAAAEAD1VJUXVpY2tBZGRFdmVudAAHX19FT0ZfXw**&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">Save</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value">normal event Atom100</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/17/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">07:30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/17/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">08:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcrAAt1aWNvbXBvbmVudAAAAAEAD1VJUXVpY2tBZGRFdmVudAAHX19FT0ZfXw**&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="weekly" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1337154733000</longProp>
        <longProp name="ThreadGroup.end_time">1337154733000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcrAAt1aWNvbXBvbmVudAAAAAEAD1VJUXVpY2tBZGRFdmVudAAHX19FT0ZfXw**&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">MoreDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">14:45</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcrAAt1aWNvbXBvbmVudAAAAAEAD1VJUXVpY2tBZGRFdmVudAAHX19FT0ZfXw**&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">EditRepeat</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">14:45</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">14:45</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXctAAt1aWNvbXBvbmVudAAAAAEAEVVJUmVwZWF0RXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">Save</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="repeatType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">repeatType</stringProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="interval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">interval</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="MO" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">MO</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="TU" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">TU</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="WE" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">WE</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="TH" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">TH</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="FR" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">FR</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="SA" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">SA</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="SU" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">SU</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="monthlyType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">monthlyType</stringProp>
                <stringProp name="Argument.value">monthlyByMonthDay</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="endRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endRepeat</stringProp>
                <stringProp name="Argument.value">endByDate</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="endAfterNumber" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endAfterNumber</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="endRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endRepeat</stringProp>
                <stringProp name="Argument.value">endByDate</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
                <stringProp name="Argument.value">05/21/2013</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXctAAt1aWNvbXBvbmVudAAAAAEAEVVJUmVwZWF0RXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">Save</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value">weekly Event Atom200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">01:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">02:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">14:45</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">ConfirmCancel</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value">weekly Event Atom200</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">01:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">02:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:00</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">14:45</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="monthly" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1337155751000</longProp>
        <longProp name="ThreadGroup.end_time">1337155751000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcrAAt1aWNvbXBvbmVudAAAAAEAD1VJUXVpY2tBZGRFdmVudAAHX19FT0ZfXw**&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">MoreDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">14:57</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:12</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcrAAt1aWNvbXBvbmVudAAAAAEAD1VJUXVpY2tBZGRFdmVudAAHX19FT0ZfXw**&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">EditRepeat</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">14:57</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:12</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:12</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">14:57</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXctAAt1aWNvbXBvbmVudAAAAAEAEVVJUmVwZWF0RXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">Save</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="repeatType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">repeatType</stringProp>
                <stringProp name="Argument.value">monthly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="interval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">interval</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="MO" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">MO</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="TU" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">TU</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WE" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">WE</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TH" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">TH</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="FR" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">FR</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="SA" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">SA</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="SU" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">SU</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="monthlyType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">monthlyType</stringProp>
                <stringProp name="Argument.value">monthlyByMonthDay</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="endRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endRepeat</stringProp>
                <stringProp name="Argument.value">endAfter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="endRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endRepeat</stringProp>
                <stringProp name="Argument.value">endAfter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="endAfterNumber" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endAfterNumber</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
                <stringProp name="Argument.value">05/21/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXctAAt1aWNvbXBvbmVudAAAAAEAEVVJUmVwZWF0RXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">Save</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value">monthly-by-day event atom400</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">14:57</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:12</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:12</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">14:57</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">ConfirmCancel</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value">monthly-by-day event atom400</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">14:57</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:12</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:12</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">14:57</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="yearly" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1337156129000</longProp>
        <longProp name="ThreadGroup.end_time">1337156129000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcrAAt1aWNvbXBvbmVudAAAAAEAD1VJUXVpY2tBZGRFdmVudAAHX19FT0ZfXw**&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">MoreDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">15:14</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:29</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcrAAt1aWNvbXBvbmVudAAAAAEAD1VJUXVpY2tBZGRFdmVudAAHX19FT0ZfXw**&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">EditRepeat</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">15:14</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:29</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:29</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">15:14</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXctAAt1aWNvbXBvbmVudAAAAAEAEVVJUmVwZWF0RXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">Save</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="repeatType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">repeatType</stringProp>
                <stringProp name="Argument.value">yearly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="interval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">interval</stringProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="MO" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">MO</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="TU" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">TU</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="WE" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">WE</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="TH" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">TH</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="FR" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">FR</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SA" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">SA</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="SU" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">SU</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="monthlyType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">monthlyType</stringProp>
                <stringProp name="Argument.value">monthlyByMonthDay</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="endRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endRepeat</stringProp>
                <stringProp name="Argument.value">endAfter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="endRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endRepeat</stringProp>
                <stringProp name="Argument.value">endAfter</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="endAfterNumber" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">endAfterNumber</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
                <stringProp name="Argument.value">05/21/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXctAAt1aWNvbXBvbmVudAAAAAEAEVVJUmVwZWF0RXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">Save</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value">yearly event atom500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">15:14</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:29</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:29</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">15:14</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">ConfirmCancel</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="currentSelectedTab" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">currentSelectedTab</stringProp>
                <stringProp name="Argument.value">eventDetail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value">yearly event atom500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="place" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">place</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">15:14</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:29</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="priority" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">priority</stringProp>
                <stringProp name="Argument.value">none</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="isRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">isRepeat</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminder</stringProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">mailReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="emailIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="emailRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">emailRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mailReminderAddress" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">mailReminderAddress</stringProp>
                <stringProp name="Argument.value">abc.user0@example.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupReminder" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminder</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupReminderTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupReminderTime</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupIsRepeat" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupIsRepeat</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="popupRepeatInterval" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">popupRepeatInterval</stringProp>
                <stringProp name="Argument.value">5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="status" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">status</stringProp>
                <stringProp name="Argument.value">busy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="send" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">send</stringProp>
                <stringProp name="Argument.value">ask</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="checkTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">checkTime</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateAll" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">dateAll</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeTo" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeTo</stringProp>
                <stringProp name="Argument.value">15:29</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeFrom" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">timeFrom</stringProp>
                <stringProp name="Argument.value">15:14</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="abc.user0" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">abc.user0</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcnAAt1aWNvbXBvbmVudAAAAAEAC1VJRXZlbnRGb3JtAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="-------------------" enabled="true"/>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="task" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1337156280000</longProp>
        <longProp name="ThreadGroup.end_time">1337156280000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcqAAt1aWNvbXBvbmVudAAAAAEADlVJUXVpY2tBZGRUYXNrAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="formOp" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">formOp</stringProp>
                <stringProp name="Argument.value">Save</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="eventName" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">eventName</stringProp>
                <stringProp name="Argument.value">normal task atom600</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="description" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">description</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="from" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">from</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="fromTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">fromTime</stringProp>
                <stringProp name="Argument.value">15:17</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="to" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">to</stringProp>
                <stringProp name="Argument.value">05/16/2012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="toTime" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">toTime</stringProp>
                <stringProp name="Argument.value">15:32</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="allDay" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">allDay</stringProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="calendar" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">true</boolProp>
                <stringProp name="Argument.name">calendar</stringProp>
                <stringProp name="Argument.value">0:abc.user0-defaultCalendarId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="category" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">category</stringProp>
                <stringProp name="Argument.value">defaultEventCategoryIdAll</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${Server}</stringProp>
          <stringProp name="HTTPSampler.port">${Port}</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/portal/intranet/calendar?portal:componentId=p_b0cd7f12-0bc0-41b2-bc04-cc2f13c7e44a&amp;interactionstate=JBPNS_rO0ABXcqAAt1aWNvbXBvbmVudAAAAAEADlVJUXVpY2tBZGRUYXNrAAdfX0VPRl9f&amp;portal:type=action&amp;ajaxRequest=true</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.10 (KHTML, like Gecko) Chrome/20.0.1123.4 Safari/536.10</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate,sdch</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://${Server}:${Port}/portal/intranet/calendar</stringProp>
              </elementProp>
              <elementProp name="Accept-Charset" elementType="Header">
                <stringProp name="Header.name">Accept-Charset</stringProp>
                <stringProp name="Header.value">ISO-8859-1,utf-8;q=0.7,*;q=0.3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename">/tmp/${__time(HHmmSS)}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
